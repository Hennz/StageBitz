// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Geveo.StageBitz.Test.ItemBriefMaintanance
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            HtmlInputButton btnImportfromlist = this.UIProfessionalPropsManWindow.UIProfessionalPropsManDocument.btnImportfromlist;
            HtmlFileInput uILabelFileInput = this.UIProfessionalPropsManWindow.UIProfessionalPropsManDocument.UILabelFileInput;
            HtmlDiv uIItemPane = this.UIProfessionalPropsManWindow.UIProfessionalPropsManDocument.UIMainContent_PageContPane.UIItemPane;
            HtmlHeaderCell uICategoryCell = this.UIProfessionalPropsManWindow.UIProfessionalPropsManDocument.UICtl00_ctl00_MainContTable.UICategoryCell;
            HtmlDiv uICtl00_ctl00_MainContPane = this.UIProfessionalPropsManWindow.UIProfessionalPropsManDocument.UICtl00_ctl00_MainContPane;
            HtmlInputButton btnConfirmImport = this.UIProfessionalPropsManWindow.UIProfessionalPropsManDocument.btnConfirmImport;
            HtmlInputButton btnDone = this.UIProfessionalPropsManWindow.UIProfessionalPropsManDocument.btnDone;
            #endregion

            // Click 'Import from list' button
            Mouse.Click(btnImportfromlist, new Point(34, 10));

            // Set flag to allow play back to continue if non-essential actions fail. (For example, if a mouse hover action fails.)
            Playback.PlaybackSettings.ContinueOnError = true;

            // Mouse hover 'Import from list' button at (34, 10)
            Mouse.Hover(btnImportfromlist, new Point(34, 10));

            // Reset flag to ensure that play back stops if there is an error.
            Playback.PlaybackSettings.ContinueOnError = false;

            // Type 'C:\Users\prasadhi\Desktop\testdata\Audio2.csv' in 'label' file input
            uILabelFileInput.FileName = this.RecordedMethod1Params.UILabelFileInputFileName;

            // Set flag to allow play back to continue if non-essential actions fail. (For example, if a mouse hover action fails.)
            Playback.PlaybackSettings.ContinueOnError = true;

            // Mouse hover  pane at (320, 123)
            Mouse.Hover(uIItemPane, new Point(320, 123));

            // Mouse hover 'Category' cell at (59, 20)
            Mouse.Hover(uICategoryCell, new Point(59, 20));

            // Mouse hover 'ctl00_ctl00_MainContent_PageContent_ImportbulkItem...' pane at (683, 83)
            Mouse.Hover(uICtl00_ctl00_MainContPane, new Point(683, 83));

            // Reset flag to ensure that play back stops if there is an error.
            Playback.PlaybackSettings.ContinueOnError = false;

            // Click 'Confirm Import' button
            Mouse.Click(btnConfirmImport, new Point(43, 13));

            // Set flag to allow play back to continue if non-essential actions fail. (For example, if a mouse hover action fails.)
            Playback.PlaybackSettings.ContinueOnError = true;

            // Mouse hover 'Confirm Import' button at (43, 13)
            Mouse.Hover(btnConfirmImport, new Point(43, 13));

            // Reset flag to ensure that play back stops if there is an error.
            Playback.PlaybackSettings.ContinueOnError = false;

            // Click 'Done' button
            Mouse.Click(btnDone, new Point(16, 13));
        }
        
        /// <summary>
        /// NavigaeteToAudioBriefListPage
        /// </summary>
        public void NavigaeteToAudioBriefListPage()
        {
            #region Variable Declarations
            HtmlHyperlink uIAudio0AudioBriefs0CoHyperlink = this.UIProfessionalPropsManWindow.UIProfessionalPropsManDocument1.UIAudio0AudioBriefs0CoHyperlink;
            #endregion

            // Click 'Audio 0 Audio Briefs 0 Completed 0 In Progress 0 ...' link
            Mouse.Click(uIAudio0AudioBriefs0CoHyperlink, new Point(83, 22));
        }
        
        /// <summary>
        /// BulkUpload - Use 'BulkUploadParams' to pass parameters into this method.
        /// </summary>
        public void BulkUpload()
        {
            #region Variable Declarations
            HtmlInputButton uIImportfromlistButton = this.UIProfessionalPropsManWindow.UIProfessionalPropsManDocument2.UIImportfromlistButton;
            HtmlCustom uICtl00_ctl00_MainContCustom = this.UIProfessionalPropsManWindow.UIProfessionalPropsManDocument2.UICtl00_ctl00_MainContCustom;
            WinComboBox uIFilenameComboBox = this.UIOpenWindow.UIItemWindow.UIFilenameComboBox;
            WinSplitButton uIOpenSplitButton = this.UIOpenWindow.UIOpenWindow1.UIOpenSplitButton;
            HtmlDiv uIImportAudioBriefsfroPane = this.UIProfessionalPropsManWindow.UIProfessionalPropsManDocument2.UIMainContent_PageContPane.UIImportAudioBriefsfroPane;
            HtmlInputButton uIConfirmImportButton = this.UIProfessionalPropsManWindow.UIProfessionalPropsManDocument2.UIConfirmImportButton;
            HtmlDiv uIItemPane = this.UIProfessionalPropsManWindow.UIProfessionalPropsManDocument2.UIMainContent_PageContPane.UIItemPane;
            HtmlDiv uIItemPane1 = this.UIProfessionalPropsManWindow.UIProfessionalPropsManDocument2.UIUpdateProgressPane.UIItemPane;
            HtmlInputButton uIDoneButton = this.UIProfessionalPropsManWindow.UIProfessionalPropsManDocument2.UIDoneButton;
            #endregion

            // Click 'Import from list' button
            Mouse.Click(uIImportfromlistButton, new Point(34, 6));

            // Set flag to allow play back to continue if non-essential actions fail. (For example, if a mouse hover action fails.)
            Playback.PlaybackSettings.ContinueOnError = true;

            // Mouse hover 'ctl00_ctl00_MainContent_PageContent_ImportbulkItem...' custom control at (169, 12)
            Mouse.Hover(uICtl00_ctl00_MainContCustom, new Point(169, 12));

            // Microsoft Silverlight is currently not supported. Go to http://go.microsoft.com/fwlink/?LinkID=251805 for information on available add-in for possible support.

            // Microsoft Silverlight is currently not supported. Go to http://go.microsoft.com/fwlink/?LinkID=251805 for information on available add-in for possible support.

            // Reset flag to ensure that play back stops if there is an error.
            Playback.PlaybackSettings.ContinueOnError = false;

            // Select 'Audio2.csv' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.BulkUploadParams.UIFilenameComboBoxEditableItem;

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(39, 11));

            // Set flag to allow play back to continue if non-essential actions fail. (For example, if a mouse hover action fails.)
            Playback.PlaybackSettings.ContinueOnError = true;

            // Mouse hover 'ctl00_ctl00_MainContent_PageContent_ImportbulkItem...' custom control at (-339, -471)
            Mouse.Hover(uICtl00_ctl00_MainContCustom, new Point(-339, -471));

            // Mouse hover 'Import Audio Briefs from list' pane at (369, 27)
            Mouse.Hover(uIImportAudioBriefsfroPane, new Point(369, 27));

            // Reset flag to ensure that play back stops if there is an error.
            Playback.PlaybackSettings.ContinueOnError = false;

            // Click 'Confirm Import' button
            Mouse.Click(uIConfirmImportButton, new Point(36, 12));

            // Set flag to allow play back to continue if non-essential actions fail. (For example, if a mouse hover action fails.)
            Playback.PlaybackSettings.ContinueOnError = true;

            // Mouse hover  pane at (656, 8)
            Mouse.Hover(uIItemPane, new Point(656, 8));

            // Mouse hover  pane at (832, 629)
            Mouse.Hover(uIItemPane1, new Point(832, 629));

            // Reset flag to ensure that play back stops if there is an error.
            Playback.PlaybackSettings.ContinueOnError = false;

            // Click 'Done' button
            Mouse.Click(uIDoneButton, new Point(11, 8));
        }
        
        /// <summary>
        /// BulkUpload2 - Use 'BulkUpload2Params' to pass parameters into this method.
        /// </summary>
        public void BulkUpload2()
        {
            #region Variable Declarations
            HtmlInputButton uIImportfromlistButton = this.UIProfessionalPropsManWindow.UIProfessionalPropsManDocument3.UIImportfromlistButton;
            HtmlFileInput uILabelFileInput = this.UIProfessionalPropsManWindow.UIProfessionalPropsManDocument3.UILabelFileInput;
            #endregion

            // Click 'Import from list' button
            Mouse.Click(uIImportfromlistButton, new Point(60, 8));

            // Set flag to allow play back to continue if non-essential actions fail. (For example, if a mouse hover action fails.)
            Playback.PlaybackSettings.ContinueOnError = true;

            // Mouse hover 'Import from list' button at (59, 8)
            Mouse.Hover(uIImportfromlistButton, new Point(59, 8));

            // Reset flag to ensure that play back stops if there is an error.
            Playback.PlaybackSettings.ContinueOnError = false;

            // Type 'C:\Users\prasadhi\Desktop\testdata\Audio2.csv' in 'label' file input
            uILabelFileInput.FileName = this.BulkUpload2Params.UILabelFileInputFileName;
        }
        
        #region Properties
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public virtual BulkUploadParams BulkUploadParams
        {
            get
            {
                if ((this.mBulkUploadParams == null))
                {
                    this.mBulkUploadParams = new BulkUploadParams();
                }
                return this.mBulkUploadParams;
            }
        }
        
        public virtual BulkUpload2Params BulkUpload2Params
        {
            get
            {
                if ((this.mBulkUpload2Params == null))
                {
                    this.mBulkUpload2Params = new BulkUpload2Params();
                }
                return this.mBulkUpload2Params;
            }
        }
        
        public UIProfessionalPropsManWindow UIProfessionalPropsManWindow
        {
            get
            {
                if ((this.mUIProfessionalPropsManWindow == null))
                {
                    this.mUIProfessionalPropsManWindow = new UIProfessionalPropsManWindow();
                }
                return this.mUIProfessionalPropsManWindow;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow();
                }
                return this.mUIOpenWindow;
            }
        }
        #endregion
        
        #region Fields
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private BulkUploadParams mBulkUploadParams;
        
        private BulkUpload2Params mBulkUpload2Params;
        
        private UIProfessionalPropsManWindow mUIProfessionalPropsManWindow;
        
        private UIOpenWindow mUIOpenWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'C:\Users\prasadhi\Desktop\testdata\Audio2.csv' in 'label' file input
        /// </summary>
        public string UILabelFileInputFileName = "C:\\Users\\prasadhi\\Desktop\\testdata\\Audio2.csv";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'BulkUpload'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class BulkUploadParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'Audio2.csv' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "Audio2.csv";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'BulkUpload2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class BulkUpload2Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'C:\Users\prasadhi\Desktop\testdata\Audio2.csv' in 'label' file input
        /// </summary>
        public string UILabelFileInputFileName = "C:\\Users\\prasadhi\\Desktop\\testdata\\Audio2.csv";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIProfessionalPropsManWindow : BrowserWindow
    {
        
        public UIProfessionalPropsManWindow()
        {
            #region Search Criteria
            this.SearchProperties[UITestControl.PropertyNames.Name] = "Professional Props Management | StageBitz";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Professional Props Management | StageBitz");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIProfessionalPropsManDocument UIProfessionalPropsManDocument
        {
            get
            {
                if ((this.mUIProfessionalPropsManDocument == null))
                {
                    this.mUIProfessionalPropsManDocument = new UIProfessionalPropsManDocument(this);
                }
                return this.mUIProfessionalPropsManDocument;
            }
        }
        
        public UIProfessionalPropsManDocument1 UIProfessionalPropsManDocument1
        {
            get
            {
                if ((this.mUIProfessionalPropsManDocument1 == null))
                {
                    this.mUIProfessionalPropsManDocument1 = new UIProfessionalPropsManDocument1(this);
                }
                return this.mUIProfessionalPropsManDocument1;
            }
        }
        
        public UIProfessionalPropsManDocument2 UIProfessionalPropsManDocument2
        {
            get
            {
                if ((this.mUIProfessionalPropsManDocument2 == null))
                {
                    this.mUIProfessionalPropsManDocument2 = new UIProfessionalPropsManDocument2(this);
                }
                return this.mUIProfessionalPropsManDocument2;
            }
        }
        
        public UIProfessionalPropsManDocument3 UIProfessionalPropsManDocument3
        {
            get
            {
                if ((this.mUIProfessionalPropsManDocument3 == null))
                {
                    this.mUIProfessionalPropsManDocument3 = new UIProfessionalPropsManDocument3(this);
                }
                return this.mUIProfessionalPropsManDocument3;
            }
        }
        #endregion
        
        #region Fields
        private UIProfessionalPropsManDocument mUIProfessionalPropsManDocument;
        
        private UIProfessionalPropsManDocument1 mUIProfessionalPropsManDocument1;
        
        private UIProfessionalPropsManDocument2 mUIProfessionalPropsManDocument2;
        
        private UIProfessionalPropsManDocument3 mUIProfessionalPropsManDocument3;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIProfessionalPropsManDocument : HtmlDocument
    {
        
        public UIProfessionalPropsManDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Professional Props Management | StageBitz";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/StageBitz.DevUserWeb/ItemBrief/ItemBriefList.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost/StageBitz.DevUserWeb/ItemBrief/ItemBriefList.aspx?projectid=200&" +
                "ItemTypeId=6&Sort=ItemBrief.Name%7c1%7c";
            this.WindowTitles.Add("Professional Props Management | StageBitz");
            #endregion
        }
        
        #region Properties
        public HtmlInputButton btnImportfromlist
        {
            get
            {
                if ((this.mbtnImportfromlist == null))
                {
                    this.mbtnImportfromlist = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mbtnImportfromlist.SearchProperties[HtmlButton.PropertyNames.Id] = "MainContent_PageContent_ImportbulkItemsControl_btnImportItemBrief";
                    this.mbtnImportfromlist.SearchProperties[HtmlButton.PropertyNames.Name] = "ctl00$ctl00$MainContent$PageContent$ImportbulkItemsControl$btnImportItemBrief";
                    this.mbtnImportfromlist.FilterProperties[HtmlButton.PropertyNames.DisplayText] = "Import from list";
                    this.mbtnImportfromlist.FilterProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mbtnImportfromlist.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mbtnImportfromlist.FilterProperties[HtmlButton.PropertyNames.Class] = "buttonStyle";
                    this.mbtnImportfromlist.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "name=\"ctl00$ctl00$MainContent$PageConten";
                    this.mbtnImportfromlist.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "6";
                    this.mbtnImportfromlist.WindowTitles.Add("Professional Props Management | StageBitz");
                    #endregion
                }
                return this.mbtnImportfromlist;
            }
        }
        
        public HtmlFileInput UILabelFileInput
        {
            get
            {
                if ((this.mUILabelFileInput == null))
                {
                    this.mUILabelFileInput = new HtmlFileInput(this);
                    #region Search Criteria
                    this.mUILabelFileInput.SearchProperties[HtmlFileInput.PropertyNames.Id] = "ctl00_ctl00_MainContent_PageContent_ImportbulkItemsControl_radUploaderfile0";
                    this.mUILabelFileInput.SearchProperties[HtmlFileInput.PropertyNames.Name] = "ctl00_ctl00_MainContent_PageContent_ImportbulkItemsControl_radUploaderfile0";
                    this.mUILabelFileInput.FilterProperties[HtmlFileInput.PropertyNames.LabeledBy] = "label";
                    this.mUILabelFileInput.FilterProperties[HtmlFileInput.PropertyNames.Title] = null;
                    this.mUILabelFileInput.FilterProperties[HtmlFileInput.PropertyNames.Class] = "ruFileInput";
                    this.mUILabelFileInput.FilterProperties[HtmlFileInput.PropertyNames.ControlDefinition] = "name=\"ctl00_ctl00_MainContent_PageConten";
                    this.mUILabelFileInput.FilterProperties[HtmlFileInput.PropertyNames.TagInstance] = "11";
                    this.mUILabelFileInput.WindowTitles.Add("Professional Props Management | StageBitz");
                    #endregion
                }
                return this.mUILabelFileInput;
            }
        }
        
        public UIMainContent_PageContPane UIMainContent_PageContPane
        {
            get
            {
                if ((this.mUIMainContent_PageContPane == null))
                {
                    this.mUIMainContent_PageContPane = new UIMainContent_PageContPane(this);
                }
                return this.mUIMainContent_PageContPane;
            }
        }
        
        public UICtl00_ctl00_MainContTable UICtl00_ctl00_MainContTable
        {
            get
            {
                if ((this.mUICtl00_ctl00_MainContTable == null))
                {
                    this.mUICtl00_ctl00_MainContTable = new UICtl00_ctl00_MainContTable(this);
                }
                return this.mUICtl00_ctl00_MainContTable;
            }
        }
        
        public HtmlDiv UICtl00_ctl00_MainContPane
        {
            get
            {
                if ((this.mUICtl00_ctl00_MainContPane == null))
                {
                    this.mUICtl00_ctl00_MainContPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUICtl00_ctl00_MainContPane.SearchProperties[HtmlDiv.PropertyNames.Id] = "ctl00_ctl00_MainContent_PageContent_ImportbulkItemsControl_gvItems_GridData";
                    this.mUICtl00_ctl00_MainContPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUICtl00_ctl00_MainContPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nPowered Rack21fileno i";
                    this.mUICtl00_ctl00_MainContPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUICtl00_ctl00_MainContPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "rgDataDiv";
                    this.mUICtl00_ctl00_MainContPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"rgDataDiv\" id=\"ctl00_ctl00_MainCo";
                    this.mUICtl00_ctl00_MainContPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "58";
                    this.mUICtl00_ctl00_MainContPane.WindowTitles.Add("Professional Props Management | StageBitz");
                    #endregion
                }
                return this.mUICtl00_ctl00_MainContPane;
            }
        }
        
        public HtmlInputButton btnConfirmImport
        {
            get
            {
                if ((this.mbtnConfirmImport == null))
                {
                    this.mbtnConfirmImport = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mbtnConfirmImport.SearchProperties[HtmlButton.PropertyNames.Id] = "MainContent_PageContent_ImportbulkItemsControl_btnConfirm";
                    this.mbtnConfirmImport.SearchProperties[HtmlButton.PropertyNames.Name] = "ctl00$ctl00$MainContent$PageContent$ImportbulkItemsControl$btnConfirm";
                    this.mbtnConfirmImport.FilterProperties[HtmlButton.PropertyNames.DisplayText] = "Confirm Import";
                    this.mbtnConfirmImport.FilterProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mbtnConfirmImport.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mbtnConfirmImport.FilterProperties[HtmlButton.PropertyNames.Class] = "buttonStyle";
                    this.mbtnConfirmImport.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "name=\"ctl00$ctl00$MainContent$PageConten";
                    this.mbtnConfirmImport.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "12";
                    this.mbtnConfirmImport.WindowTitles.Add("Professional Props Management | StageBitz");
                    #endregion
                }
                return this.mbtnConfirmImport;
            }
        }
        
        public HtmlInputButton btnDone
        {
            get
            {
                if ((this.mbtnDone == null))
                {
                    this.mbtnDone = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mbtnDone.SearchProperties[HtmlButton.PropertyNames.Id] = "MainContent_PageContent_ImportbulkItemsControl_btnDone";
                    this.mbtnDone.SearchProperties[HtmlButton.PropertyNames.Name] = "ctl00$ctl00$MainContent$PageContent$ImportbulkItemsControl$btnDone";
                    this.mbtnDone.FilterProperties[HtmlButton.PropertyNames.DisplayText] = "Done";
                    this.mbtnDone.FilterProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mbtnDone.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mbtnDone.FilterProperties[HtmlButton.PropertyNames.Class] = "buttonStyle";
                    this.mbtnDone.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "name=\"ctl00$ctl00$MainContent$PageConten";
                    this.mbtnDone.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "11";
                    this.mbtnDone.WindowTitles.Add("Professional Props Management | StageBitz");
                    #endregion
                }
                return this.mbtnDone;
            }
        }
        #endregion
        
        #region Fields
        private HtmlInputButton mbtnImportfromlist;
        
        private HtmlFileInput mUILabelFileInput;
        
        private UIMainContent_PageContPane mUIMainContent_PageContPane;
        
        private UICtl00_ctl00_MainContTable mUICtl00_ctl00_MainContTable;
        
        private HtmlDiv mUICtl00_ctl00_MainContPane;
        
        private HtmlInputButton mbtnConfirmImport;
        
        private HtmlInputButton mbtnDone;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIMainContent_PageContPane : HtmlDiv
    {
        
        public UIMainContent_PageContPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "MainContent_PageContent_ImportbulkItemsControl_popupImportItems";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = " \r\n\r\n\r\n\r\n\r\n\r\nImport Audio Briefs from li";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = "popupBox";
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"popupBox\" id=\"MainContent_PageCon";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "37";
            this.WindowTitles.Add("Professional Props Management | StageBitz");
            #endregion
        }
        
        #region Properties
        public HtmlDiv UIItemPane
        {
            get
            {
                if ((this.mUIItemPane == null))
                {
                    this.mUIItemPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUIItemPane.SearchProperties[HtmlDiv.PropertyNames.Id] = null;
                    this.mUIItemPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIItemPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = null;
                    this.mUIItemPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIItemPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "popupBoxOverlay";
                    this.mUIItemPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"popupBoxOverlay\"";
                    this.mUIItemPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "1";
                    this.mUIItemPane.WindowTitles.Add("Professional Props Management | StageBitz");
                    #endregion
                }
                return this.mUIItemPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlDiv mUIItemPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UICtl00_ctl00_MainContTable : HtmlTable
    {
        
        public UICtl00_ctl00_MainContTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlTable.PropertyNames.Id] = "ctl00_ctl00_MainContent_PageContent_ImportbulkItemsControl_gvItems_ctl00_Header";
            this.SearchProperties[HtmlTable.PropertyNames.Name] = null;
            this.FilterProperties[HtmlTable.PropertyNames.InnerText] = "\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nItem Name\r\n\r\nDescrip";
            this.FilterProperties[HtmlTable.PropertyNames.ControlDefinition] = "class=\"rgMasterTable rgClipCells\" id=\"ct";
            this.FilterProperties[HtmlTable.PropertyNames.RowCount] = "2";
            this.FilterProperties[HtmlTable.PropertyNames.ColumnCount] = "8";
            this.FilterProperties[HtmlTable.PropertyNames.Class] = "rgMasterTable rgClipCells";
            this.FilterProperties[HtmlTable.PropertyNames.TagInstance] = "2";
            this.WindowTitles.Add("Professional Props Management | StageBitz");
            #endregion
        }
        
        #region Properties
        public HtmlHeaderCell UICategoryCell
        {
            get
            {
                if ((this.mUICategoryCell == null))
                {
                    this.mUICategoryCell = new HtmlHeaderCell(this);
                    #region Search Criteria
                    this.mUICategoryCell.SearchProperties[HtmlCell.PropertyNames.Id] = null;
                    this.mUICategoryCell.SearchProperties[HtmlCell.PropertyNames.Name] = null;
                    this.mUICategoryCell.SearchProperties[HtmlCell.PropertyNames.MaxDepth] = "3";
                    this.mUICategoryCell.FilterProperties[HtmlCell.PropertyNames.InnerText] = "Category";
                    this.mUICategoryCell.FilterProperties[HtmlCell.PropertyNames.ControlDefinition] = "class=\"rgHeader\" scope=\"col\"";
                    this.mUICategoryCell.FilterProperties[HtmlCell.PropertyNames.RowIndex] = "0";
                    this.mUICategoryCell.FilterProperties[HtmlCell.PropertyNames.ColumnIndex] = "2";
                    this.mUICategoryCell.FilterProperties[HtmlCell.PropertyNames.Class] = "rgHeader";
                    this.mUICategoryCell.FilterProperties[HtmlCell.PropertyNames.TagInstance] = "3";
                    this.mUICategoryCell.WindowTitles.Add("Professional Props Management | StageBitz");
                    #endregion
                }
                return this.mUICategoryCell;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHeaderCell mUICategoryCell;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIProfessionalPropsManDocument1 : HtmlDocument
    {
        
        public UIProfessionalPropsManDocument1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Professional Props Management | StageBitz";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/StageBitz.DevUserWeb/Project/ProjectDashboard.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost/StageBitz.DevUserWeb/Project/ProjectDashboard.aspx?projectid=302" +
                "";
            this.WindowTitles.Add("Professional Props Management | StageBitz");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIAudio0AudioBriefs0CoHyperlink
        {
            get
            {
                if ((this.mUIAudio0AudioBriefs0CoHyperlink == null))
                {
                    this.mUIAudio0AudioBriefs0CoHyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIAudio0AudioBriefs0CoHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Id] = "MainContent_PageContent_ucprojectItemBrief_lvProjectItemTypes_linkItemBrief_0";
                    this.mUIAudio0AudioBriefs0CoHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Name] = null;
                    this.mUIAudio0AudioBriefs0CoHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.Target] = null;
                    this.mUIAudio0AudioBriefs0CoHyperlink.SearchProperties[HtmlHyperlink.PropertyNames.InnerText] = "\r\n\r\n Audio \r\n\r\n 0 Audio Briefs \r\n\r\n 0 Completed \r\n 0 In Progress \r\n 0 Not Started" +
                        " ";
                    this.mUIAudio0AudioBriefs0CoHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.AbsolutePath] = "/StageBitz.DevUserWeb/ItemBrief/ItemBriefList.aspx";
                    this.mUIAudio0AudioBriefs0CoHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Title] = null;
                    this.mUIAudio0AudioBriefs0CoHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Href] = "http://localhost/StageBitz.DevUserWeb/ItemBrief/ItemBriefList.aspx?ProjectId=302&" +
                        "ItemTypeId=6";
                    this.mUIAudio0AudioBriefs0CoHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.Class] = null;
                    this.mUIAudio0AudioBriefs0CoHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.ControlDefinition] = "id=\"MainContent_PageContent_ucprojectIte";
                    this.mUIAudio0AudioBriefs0CoHyperlink.FilterProperties[HtmlHyperlink.PropertyNames.TagInstance] = "33";
                    this.mUIAudio0AudioBriefs0CoHyperlink.WindowTitles.Add("Professional Props Management | StageBitz");
                    #endregion
                }
                return this.mUIAudio0AudioBriefs0CoHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIAudio0AudioBriefs0CoHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIProfessionalPropsManDocument2 : HtmlDocument
    {
        
        public UIProfessionalPropsManDocument2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Professional Props Management | StageBitz";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/StageBitz.DevUserWeb/ItemBrief/ItemBriefList.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost/StageBitz.DevUserWeb/ItemBrief/ItemBriefList.aspx?ProjectId=313&" +
                "ItemTypeId=6";
            this.WindowTitles.Add("Professional Props Management | StageBitz");
            #endregion
        }
        
        #region Properties
        public HtmlInputButton UIImportfromlistButton
        {
            get
            {
                if ((this.mUIImportfromlistButton == null))
                {
                    this.mUIImportfromlistButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUIImportfromlistButton.SearchProperties[HtmlButton.PropertyNames.Id] = "MainContent_PageContent_ImportbulkItemsControl_btnImportItemBrief";
                    this.mUIImportfromlistButton.SearchProperties[HtmlButton.PropertyNames.Name] = "ctl00$ctl00$MainContent$PageContent$ImportbulkItemsControl$btnImportItemBrief";
                    this.mUIImportfromlistButton.FilterProperties[HtmlButton.PropertyNames.DisplayText] = "Import from list";
                    this.mUIImportfromlistButton.FilterProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUIImportfromlistButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUIImportfromlistButton.FilterProperties[HtmlButton.PropertyNames.Class] = "buttonStyle";
                    this.mUIImportfromlistButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "name=\"ctl00$ctl00$MainContent$PageConten";
                    this.mUIImportfromlistButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "6";
                    this.mUIImportfromlistButton.WindowTitles.Add("Professional Props Management | StageBitz");
                    #endregion
                }
                return this.mUIImportfromlistButton;
            }
        }
        
        public HtmlCustom UICtl00_ctl00_MainContCustom
        {
            get
            {
                if ((this.mUICtl00_ctl00_MainContCustom == null))
                {
                    this.mUICtl00_ctl00_MainContCustom = new HtmlCustom(this);
                    #region Search Criteria
                    this.mUICtl00_ctl00_MainContCustom.SearchProperties["Id"] = "ctl00_ctl00_MainContent_PageContent_ImportbulkItemsControl_radUploadersilverlight" +
                        "04";
                    this.mUICtl00_ctl00_MainContCustom.SearchProperties[UITestControl.PropertyNames.Name] = null;
                    this.mUICtl00_ctl00_MainContCustom.SearchProperties["TagName"] = "OBJECT";
                    this.mUICtl00_ctl00_MainContCustom.FilterProperties["Class"] = "ruObject";
                    this.mUICtl00_ctl00_MainContCustom.FilterProperties["ControlDefinition"] = "height=\"22\" class=\"ruObject\" id=\"ctl00_c";
                    this.mUICtl00_ctl00_MainContCustom.FilterProperties["TagInstance"] = "1";
                    this.mUICtl00_ctl00_MainContCustom.WindowTitles.Add("Professional Props Management | StageBitz");
                    #endregion
                }
                return this.mUICtl00_ctl00_MainContCustom;
            }
        }
        
        public UIMainContent_PageContPane1 UIMainContent_PageContPane
        {
            get
            {
                if ((this.mUIMainContent_PageContPane == null))
                {
                    this.mUIMainContent_PageContPane = new UIMainContent_PageContPane1(this);
                }
                return this.mUIMainContent_PageContPane;
            }
        }
        
        public HtmlInputButton UIConfirmImportButton
        {
            get
            {
                if ((this.mUIConfirmImportButton == null))
                {
                    this.mUIConfirmImportButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUIConfirmImportButton.SearchProperties[HtmlButton.PropertyNames.Id] = "MainContent_PageContent_ImportbulkItemsControl_btnConfirm";
                    this.mUIConfirmImportButton.SearchProperties[HtmlButton.PropertyNames.Name] = "ctl00$ctl00$MainContent$PageContent$ImportbulkItemsControl$btnConfirm";
                    this.mUIConfirmImportButton.FilterProperties[HtmlButton.PropertyNames.DisplayText] = "Confirm Import";
                    this.mUIConfirmImportButton.FilterProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUIConfirmImportButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUIConfirmImportButton.FilterProperties[HtmlButton.PropertyNames.Class] = "buttonStyle";
                    this.mUIConfirmImportButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "name=\"ctl00$ctl00$MainContent$PageConten";
                    this.mUIConfirmImportButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "12";
                    this.mUIConfirmImportButton.WindowTitles.Add("Professional Props Management | StageBitz");
                    #endregion
                }
                return this.mUIConfirmImportButton;
            }
        }
        
        public UIUpdateProgressPane UIUpdateProgressPane
        {
            get
            {
                if ((this.mUIUpdateProgressPane == null))
                {
                    this.mUIUpdateProgressPane = new UIUpdateProgressPane(this);
                }
                return this.mUIUpdateProgressPane;
            }
        }
        
        public HtmlInputButton UIDoneButton
        {
            get
            {
                if ((this.mUIDoneButton == null))
                {
                    this.mUIDoneButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUIDoneButton.SearchProperties[HtmlButton.PropertyNames.Id] = "MainContent_PageContent_ImportbulkItemsControl_btnDone";
                    this.mUIDoneButton.SearchProperties[HtmlButton.PropertyNames.Name] = "ctl00$ctl00$MainContent$PageContent$ImportbulkItemsControl$btnDone";
                    this.mUIDoneButton.FilterProperties[HtmlButton.PropertyNames.DisplayText] = "Done";
                    this.mUIDoneButton.FilterProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUIDoneButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUIDoneButton.FilterProperties[HtmlButton.PropertyNames.Class] = "buttonStyle";
                    this.mUIDoneButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "name=\"ctl00$ctl00$MainContent$PageConten";
                    this.mUIDoneButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "11";
                    this.mUIDoneButton.WindowTitles.Add("Professional Props Management | StageBitz");
                    #endregion
                }
                return this.mUIDoneButton;
            }
        }
        #endregion
        
        #region Fields
        private HtmlInputButton mUIImportfromlistButton;
        
        private HtmlCustom mUICtl00_ctl00_MainContCustom;
        
        private UIMainContent_PageContPane1 mUIMainContent_PageContPane;
        
        private HtmlInputButton mUIConfirmImportButton;
        
        private UIUpdateProgressPane mUIUpdateProgressPane;
        
        private HtmlInputButton mUIDoneButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIMainContent_PageContPane1 : HtmlDiv
    {
        
        public UIMainContent_PageContPane1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "MainContent_PageContent_ImportbulkItemsControl_popupImportItems";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = " \r\n\r\n\r\n\r\n\r\n\r\nImport Audio Briefs from li";
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = "popupBox";
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"popupBox\" id=\"MainContent_PageCon";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "37";
            this.WindowTitles.Add("Professional Props Management | StageBitz");
            #endregion
        }
        
        #region Properties
        public HtmlDiv UIImportAudioBriefsfroPane
        {
            get
            {
                if ((this.mUIImportAudioBriefsfroPane == null))
                {
                    this.mUIImportAudioBriefsfroPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUIImportAudioBriefsfroPane.SearchProperties[HtmlDiv.PropertyNames.Id] = null;
                    this.mUIImportAudioBriefsfroPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIImportAudioBriefsfroPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "Import Audio Briefs from list ";
                    this.mUIImportAudioBriefsfroPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIImportAudioBriefsfroPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "popupBoxTitlebar";
                    this.mUIImportAudioBriefsfroPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"popupBoxTitlebar\"";
                    this.mUIImportAudioBriefsfroPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "5";
                    this.mUIImportAudioBriefsfroPane.WindowTitles.Add("Professional Props Management | StageBitz");
                    #endregion
                }
                return this.mUIImportAudioBriefsfroPane;
            }
        }
        
        public HtmlDiv UIItemPane
        {
            get
            {
                if ((this.mUIItemPane == null))
                {
                    this.mUIItemPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUIItemPane.SearchProperties[HtmlDiv.PropertyNames.Id] = null;
                    this.mUIItemPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIItemPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = "   ";
                    this.mUIItemPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIItemPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "popupBoxBottomStripe";
                    this.mUIItemPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"popupBoxBottomStripe\"";
                    this.mUIItemPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "32";
                    this.mUIItemPane.WindowTitles.Add("Professional Props Management | StageBitz");
                    #endregion
                }
                return this.mUIItemPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlDiv mUIImportAudioBriefsfroPane;
        
        private HtmlDiv mUIItemPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIUpdateProgressPane : HtmlDiv
    {
        
        public UIUpdateProgressPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "updateProgress";
            this.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.InnerText] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = null;
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "id=\"updateProgress\" role=\"status\" aria-h";
            this.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "4";
            this.WindowTitles.Add("Professional Props Management | StageBitz");
            #endregion
        }
        
        #region Properties
        public HtmlDiv UIItemPane
        {
            get
            {
                if ((this.mUIItemPane == null))
                {
                    this.mUIItemPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUIItemPane.SearchProperties[HtmlDiv.PropertyNames.Id] = null;
                    this.mUIItemPane.SearchProperties[HtmlDiv.PropertyNames.Name] = null;
                    this.mUIItemPane.FilterProperties[HtmlDiv.PropertyNames.InnerText] = null;
                    this.mUIItemPane.FilterProperties[HtmlDiv.PropertyNames.Title] = null;
                    this.mUIItemPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "updateProgressOverlay";
                    this.mUIItemPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"updateProgressOverlay\"";
                    this.mUIItemPane.FilterProperties[HtmlDiv.PropertyNames.TagInstance] = "1";
                    this.mUIItemPane.WindowTitles.Add("Professional Props Management | StageBitz");
                    #endregion
                }
                return this.mUIItemPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlDiv mUIItemPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIProfessionalPropsManDocument3 : HtmlDocument
    {
        
        public UIProfessionalPropsManDocument3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = null;
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties[HtmlDocument.PropertyNames.Title] = "Professional Props Management | StageBitz";
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/StageBitz.DevUserWeb/ItemBrief/ItemBriefList.aspx";
            this.FilterProperties[HtmlDocument.PropertyNames.PageUrl] = "http://localhost/StageBitz.DevUserWeb/ItemBrief/ItemBriefList.aspx?ProjectId=350&" +
                "ItemTypeId=6";
            this.WindowTitles.Add("Professional Props Management | StageBitz");
            #endregion
        }
        
        #region Properties
        public HtmlInputButton UIImportfromlistButton
        {
            get
            {
                if ((this.mUIImportfromlistButton == null))
                {
                    this.mUIImportfromlistButton = new HtmlInputButton(this);
                    #region Search Criteria
                    this.mUIImportfromlistButton.SearchProperties[HtmlButton.PropertyNames.Id] = "MainContent_PageContent_ImportbulkItemsControl_btnImportItemBrief";
                    this.mUIImportfromlistButton.SearchProperties[HtmlButton.PropertyNames.Name] = "ctl00$ctl00$MainContent$PageContent$ImportbulkItemsControl$btnImportItemBrief";
                    this.mUIImportfromlistButton.FilterProperties[HtmlButton.PropertyNames.DisplayText] = "Import from list";
                    this.mUIImportfromlistButton.FilterProperties[HtmlButton.PropertyNames.Type] = "submit";
                    this.mUIImportfromlistButton.FilterProperties[HtmlButton.PropertyNames.Title] = null;
                    this.mUIImportfromlistButton.FilterProperties[HtmlButton.PropertyNames.Class] = "buttonStyle";
                    this.mUIImportfromlistButton.FilterProperties[HtmlButton.PropertyNames.ControlDefinition] = "name=\"ctl00$ctl00$MainContent$PageConten";
                    this.mUIImportfromlistButton.FilterProperties[HtmlButton.PropertyNames.TagInstance] = "6";
                    this.mUIImportfromlistButton.WindowTitles.Add("Professional Props Management | StageBitz");
                    #endregion
                }
                return this.mUIImportfromlistButton;
            }
        }
        
        public HtmlFileInput UILabelFileInput
        {
            get
            {
                if ((this.mUILabelFileInput == null))
                {
                    this.mUILabelFileInput = new HtmlFileInput(this);
                    #region Search Criteria
                    this.mUILabelFileInput.SearchProperties[HtmlFileInput.PropertyNames.Id] = "ctl00_ctl00_MainContent_PageContent_ImportbulkItemsControl_radUploaderfile0";
                    this.mUILabelFileInput.SearchProperties[HtmlFileInput.PropertyNames.Name] = "ctl00_ctl00_MainContent_PageContent_ImportbulkItemsControl_radUploaderfile0";
                    this.mUILabelFileInput.FilterProperties[HtmlFileInput.PropertyNames.LabeledBy] = "label";
                    this.mUILabelFileInput.FilterProperties[HtmlFileInput.PropertyNames.Title] = null;
                    this.mUILabelFileInput.FilterProperties[HtmlFileInput.PropertyNames.Class] = "ruFileInput";
                    this.mUILabelFileInput.FilterProperties[HtmlFileInput.PropertyNames.ControlDefinition] = "name=\"ctl00_ctl00_MainContent_PageConten";
                    this.mUILabelFileInput.FilterProperties[HtmlFileInput.PropertyNames.TagInstance] = "11";
                    this.mUILabelFileInput.WindowTitles.Add("Professional Props Management | StageBitz");
                    #endregion
                }
                return this.mUILabelFileInput;
            }
        }
        #endregion
        
        #region Fields
        private HtmlInputButton mUIImportfromlistButton;
        
        private HtmlFileInput mUILabelFileInput;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIOpenWindow1 UIOpenWindow1
        {
            get
            {
                if ((this.mUIOpenWindow1 == null))
                {
                    this.mUIOpenWindow1 = new UIOpenWindow1(this);
                }
                return this.mUIOpenWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private UIOpenWindow1 mUIOpenWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1148";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIOpenWindow1 : WinWindow
    {
        
        public UIOpenWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinSplitButton UIOpenSplitButton
        {
            get
            {
                if ((this.mUIOpenSplitButton == null))
                {
                    this.mUIOpenSplitButton = new WinSplitButton(this);
                    #region Search Criteria
                    this.mUIOpenSplitButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenSplitButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenSplitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinSplitButton mUIOpenSplitButton;
        #endregion
    }
}
